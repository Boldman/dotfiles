// -*-js-*-

// Set up a config reload key binding
interactive(
    "reload-config", 
    "reload conkerorrc",
    function(I) {
	load_rc();
	I.window.minibuffer.message("config reloaded");
    }
);
define_key(default_global_keymap, "C-c r", "reload-config");

// Load urls from the command line in new buffers
url_remoting_fn = load_url_in_new_buffer;

// Use emacs as external editor
// TODO: Set up emacs daemon
//editor_shell_command = "emacsclient";
//view_source_use_external_editor = true;

// Turn on session management and session auto-save
require("session.js");
session_auto_save_mode();
session_auto_save_auto_load = true;

// Enable org-mode capturing of links
function org_capture (url, title, window) {
    var cmd_str = 'emacsclient \"org-protocol://capture:/w/'+url+'/'+title+'/"';
    if (window != null) {
	window.minibuffer.message('Issuing ' + cmd_str);
    }
    shell_command_blind(cmd_str);
}
interactive(
    "org-capture", 
    "Clip url, title, and selection to capture via org-protocol",
    function (I) {
	org_capture(encodeURIComponent(I.buffer.display_uri_string), encodeURIComponent(I.buffer.document.title), I.window);
    });

define_key(content_buffer_normal_keymap, "C-c c", "org-capture");

// Show favicons in the modeline
require("favicon");
add_hook("mode_line_hook", mode_line_adder(buffer_icon_widget), true);
read_buffer_show_icons = true;
