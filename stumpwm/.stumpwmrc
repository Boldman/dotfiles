;; -*-lisp-*-

;; Helpful links:
;; - http://www.mygooglest.com/fni/stumpwm.html
;; - https://github.com/stumpwm/stumpwm/blob/master/sample-stumpwmrc.lisp

;; Start the swank server for hot REPL action
(require 'swank)
(defvar *swank-running* nil)
(if *swank-running*
    (message "Swank server is already running.")
    (progn
      (swank:create-server)
      (setf *swank-running* t)))

;; Source functions from stumpwm package
(in-package :stumpwm)

;; Set contrib package path and load some modules
(set-contrib-dir "~/Repositories/stumpwm-contrib")
(load-module "battery-portable")
(load-module "wifi")
;;(load-module "net") ; Throws errors, but maybe because I ran after "wifi"
(load-module "mpd")

;; Root prefix binding
(set-prefix-key (kbd "C-z"))

;; Window focus/movement keys
;; - Good reference for key bindings: https://github.com/alezost/stumpwmrc/blob/master/keys.lisp
(define-key *top-map* (kbd "s-Left") "move-focus left")
(define-key *top-map* (kbd "s-Right") "move-focus right")
(define-key *top-map* (kbd "s-Up") "move-focus up")
(define-key *top-map* (kbd "s-Down") "move-focus down")
(define-key *top-map* (kbd "s-S-Left") "move-window left")
(define-key *top-map* (kbd "s-S-Right") "move-window right")
(define-key *top-map* (kbd "s-S-Up") "move-window up")
(define-key *top-map* (kbd "s-S-Down") "move-window down")
(define-key *top-map* (kbd "s-q") "fselect")
(define-key *top-map* (kbd "s-Q") "kill")
(define-key *top-map* (kbd "s-TAB") "frame-windowlist")
(define-key *top-map* (kbd "s-f") "fullscreen")
(define-key *top-map* (kbd "s-r") "iresize")

;; Group keys
(define-key *top-map* (kbd "s-1") "gselect 1")
(define-key *top-map* (kbd "s-2") "gselect 2")
(define-key *top-map* (kbd "s-3") "gselect 3")
(define-key *top-map* (kbd "s-4") "gselect 4")
(define-key *top-map* (kbd "s-5") "gselect 5")
(define-key *top-map* (kbd "s-!") "gmove 1")
(define-key *top-map* (kbd "s-@") "gmove 2")
(define-key *top-map* (kbd "s-#") "gmove 3")
(define-key *top-map* (kbd "s-$") "gmove 4")
(define-key *top-map* (kbd "s-%") "gmove 5")

;; Utility keys
(define-key *root-map* (kbd "C-l") "exec i3lock -c 001122") 
(define-key *top-map* (kbd "s-d") "exec dmenu_run")

;; Set the terminal hotkey
(define-key *top-map* (kbd "s-RET") "exec xfce4-terminal")

;; Set message window font
;; TODO: Change this to Ubuntu Mono at a reasonable size
(set-font "-misc-ubuntu mono-medium-r-normal--0-185-0-0-m-0-iso8859-15")

(setf *message-window-gravity* :center)
(setf *input-window-gravity* :bottom)
(setf *timeout-wait* 3)

(defcommand emacs () ()
  "Start Emacs or switch to it, if it is already running."
  (run-or-raise "emacs" '(:class "Emacs")))
(define-key *top-map* (kbd "s-e") "emacs")

(defcommand web-browser () ()
  "Start Conkeror or switch to it if it is already running."
  (run-or-raise "conkeror" '(:class "Conkeror")))
(define-key *top-map* (kbd "s-w") "web-browser")

;; Set border width and colors
;; Color names can be seen here: http://en.wikipedia.org/wiki/X11_color_names#Color_name_chart
(setf *normal-border-width* 2)
(setf *maxsize-border-width* 1)
(setf *window-border-style* "tight")
(set-focus-color "dodgerblue")
(set-unfocus-color "dimgray")

;; Change focus to clicked windows
(setf *mouse-focus-policy* :click)

;; Make the frame enumeration 1-based rather than 0-based
(setf *frame-number-map* "1234567890")

;; Set MPD modeline
(mpd:mpd-connect)
(setf mpd:*mpd-modeline-fmt* "%S: %a - %t (%n/%p)")

;; Set modeline format
;; TODO: Does this work?
(setf *screen-mode-line-format*
    (list
     "%g | "
     ;;"%w | "
     "^>" ;; Right-align rest of line
     "%m | "
     "%B | "
     "%I | "
     "^B^7*" '(:eval (run-shell-command "date +\"%A %b %e, %I:%M %P\"" t)) 
     ;; cpu | mem | battery
     ;;" | %D | %c %C (%f) %t | %M | %B"

     ;; ip and gw
     ;;" | " '(:eval (current-ip)) " " '(:eval (current-gw)) ; defined above
     ;; net | wifi
     ;;" | %l | %I"
     ;;'(:eval (run-shell-command "echo" t))
     ;;"^2*" "[^B%n^b] %W%48"))
))

;; Set the group format string
(setf *group-format* "%n: %t")

;; Set up default groups
;; TODO: Don't re-create them if already there!
(grename "main")
(gnewbg  "status")
(gnewbg  "misc")

;; Configure main group
;; TODO: Run default apps?
(hsplit "3/4")
;(emacs)
(fnext)
(vsplit "1/4")
(fnext)
(vsplit "1/3")

;; Set modeline options
(setf *mode-line-timeout* 1) ;; in seconds
(setf *mode-line-foreground-color* "dodgerblue")
(setf *mode-line-background-color* "gray5")
(setf *mode-line-border-color* "dimgray")
(setf *mode-line-border-width* 2)
(setf *mode-line-pad-x* 3)
(setf *mode-line-pad-y* 3)

;; Set bar options
(set-fg-color "lightblue")

;; Turn on the modeline
(if (not (head-mode-line (current-head)))
    (toggle-mode-line (current-screen) (current-head)))

;; Run tray applications
;;(run-shell-command "/usr/bin/trayer --SetDockType false --transparent true --expand false --align right &")
(run-shell-command "xfce4-power-manager")
(run-shell-command "volumeicon")
(run-shell-command "nm-applet --sm-disable")
;(run-shell-command "stalonetray --window-layer top --window-strut top --window-type normal")

;; Set the background (this requires the xloadimage package)
;(run-shell-command "feh --bg-scale /usr/share/backgrounds/gnome/Waves.jpg")
;(run-shell-command "xsetbg --fullscreen /usr/share/backgrounds/gnome/Waves.jpg")
;(run-shell-command "xsetbg -onroot --fullscreen /usr/share/backgrounds/gnome/Bokeh_Tails.jpg")

;; Run compton for compositing
(run-shell-command "compton --config ~/.compton")

;; Set the mouse cursor to a pointer
(run-shell-command "xsetroot -cursor_name left_ptr")

