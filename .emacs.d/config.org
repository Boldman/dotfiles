* daviwil's Emacs Configuration

This is an ongoing evolution of my original Emacs configuration files, inspired
by a bunch of resources I've found online.  Ultimately I'd like to write about
how I use Emacs once this configuration (and my workflow) stabilizes!

** Helper Functions

*** Platform Helpers

Here are a couple helpful functions for doing things based on what platform
Emacs is running on.  I wrote =on-platform-do= as a way to learn Emacs macros, but
there's probably a more appropriate way to do this built in to Emacs.

#+BEGIN_SRC emacs-lisp

  ;; Helper function for changing OS platform keywords to system-type strings
  (defun platform-keyword-to-string (platform-keyword)
    (cond
     ((eq platform-keyword 'windows) "windows-nt")
     ((eq platform-keyword 'cygwin) "cygwin")
     ((eq platform-keyword 'osx) "darwin")
     ((eq platform-keyword 'linux) "gnu/linux")))

  ;; Define a macro that runs an elisp expression only on a particular platform
  (defmacro on-platform-do (&rest platform-expressions)
    `(cond
      ,@(mapcar
         (lambda (platform-expr)
       (let ((keyword (nth 0 platform-expr))
             (expr (nth 1 platform-expr)))
         `(,(if (listp keyword)
           `(or
             ,@(mapcar
                (lambda (kw) `(string-equal system-type ,(platform-keyword-to-string kw)))
                keyword))
            `(string-equal system-type ,(platform-keyword-to-string keyword)))
            ,expr)))
         platform-expressions)))

#+END_SRC

** Keyboard Bindings

The Spacemacs-like configuration here was inspired by [[https://sam217pa.github.io/2016/08/30/how-to-make-your-own-spacemacs/][this post]].  I'm having a
hard time getting a totally smooth Evil/Emacs hybrid keybinding setup going so
it may turn out that I eschew Evil for everything but programming modes...

*** ESC Cancels All

#+BEGIN_SRC emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+END_SRC

*** Let's Be Evil

Some tips can be found here:

- https://github.com/noctuid/evil-guide
- https://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html

#+BEGIN_SRC emacs-lisp

  (defun dw/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    sunshine-mode
                    term-mode))
    (add-to-list 'evil-emacs-state-modes mode)))

  (defun dw/dont-arrow-me-bro ()
    (interactive)
    (message "Arrow keys are bad, you know?"))

  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    :config
    (add-hook 'evil-mode-hook 'dw/evil-hook)
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    ;; Disable arrow keys in normal and visual modes
    (define-key evil-normal-state-map (kbd "<left>") 'dw/dont-arrow-me-bro)
    (define-key evil-normal-state-map (kbd "<right>") 'dw/dont-arrow-me-bro)
    (define-key evil-normal-state-map (kbd "<down>") 'dw/dont-arrow-me-bro)
    (define-key evil-normal-state-map (kbd "<up>") 'dw/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<left>") 'dw/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<right>") 'dw/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<down>") 'dw/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<up>") 'dw/dont-arrow-me-bro)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :ensure t
    :after evil
    :custom
    (evil-collection-outline-bind-tab-p nil)
    :config
    (evil-collection-init))

  (use-package org-evil
    :ensure t
    :after evil)

#+END_SRC

*** Keybinding Panel (which-key)

[[https://github.com/justbur/emacs-which-key][which-key]] is great for getting an overview of what keybindings are available
based on the prefix keys you entered.  Learned about this one from Spacemacs.

#+BEGIN_SRC emacs-lisp

  (use-package which-key
    :ensure t
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.1))

#+END_SRC

*** Simplify Leader Bindings (general.el)

[[https://github.com/noctuid/general.el][general.el]] is a fantastic library for defining prefixed keybindings, especially
in conjunction with Evil modes.

#+BEGIN_SRC emacs-lisp

  (setq c-spc-leader "C-SPC")
  (setq spc-leader "C-SPC")

  (use-package general :ensure t
    :config
    (general-evil-setup t)

    (general-create-definer dw/leader-key-def
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (general-create-definer dw/ctrl-c-keys
      :prefix "C-c"))

#+END_SRC

*** Enable keychord bind with use-package

#+BEGIN_SRC emacs-lisp

  (use-package use-package-chords
    :ensure t
    :config (key-chord-mode 1))

#+END_SRC

** General Configuration

*** User Interface

Clean up Emacs' user interface, make it more minimal.

#+BEGIN_SRC emacs-lisp

  ;; Thanks, but no thanks
  (setq inhibit-startup-message t)

  (unless dw/is-termux
    (scroll-bar-mode -1)        ; Disable visible scrollbar
    (tool-bar-mode -1)          ; Disable the toolbar
    (tooltip-mode -1)           ; Disable tooltips
    (set-fringe-mode '(1 . 0))) ; Disable right-side fringe

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

#+END_SRC

Improve scrolling.

#+BEGIN_SRC emacs-lisp

(unless dw/is-termux
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1)) ;; keyboard scroll one line at a timesetq use-dialog-box nil) ; Disable dialog boxes since they weren't working in Mac OSX

#+END_SRC

Set frame transparency and maximize windows by default.

#+BEGIN_SRC emacs-lisp

  (unless dw/is-termux
    (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
    (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized)))

#+END_SRC

Enable line numbers and customize their format.

#+BEGIN_SRC emacs-lisp

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(term-mode-hook
                  eshell-mode-hook
                  neotree-mode-hook
                  dashboard-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+END_SRC

Don't warn for large files (shows up when launching videos)

#+begin_src emacs-lisp

  (setq large-file-warning-threshold nil)

#+end_src

*** Theme

**** Theme Config

A nice gallery of Emacs themes can be found at https://emacsthemes.com/.

So far my favorite theme is =twilight-anti-bright= but I also like the following:

- =[[https://emacsthemes.com/themes/spacegray-theme.html][spacegray]]=: Perhaps my second favorite for now, trying it out for a bit to see
  if it's "the one."
- =[[https://github.com/cpaulik/emacs-material-theme/][material]]=: Good colors, especially for org-mode headers and the modeline.  Wish
  it was more bluish, though.
- =nord=: Beautiful bluish/greenish theme.  Not the perfect amount of contrast,
  but still really nice.
- =color-theme-sanityinc-tomorrow=: Nice calm themes with good colors.  I like
  =dark= and =eighties=. Syntax hightlight leaves a little to be desired, though.
- =badger=: Nice colors for a darker theme, but perhaps too dark?
- =[[https://emacsthemes.com/themes/noctilux-theme.html][noctilux]]=: Nice colors but the use of red in some places is jarring.

Close, but no cigar:

- =arjen-grey-theme=: Looks really nice, but not enough contrast or saturation for
  my taste.
- =dakrone=: Decent dark theme, but not crazy about the colors.

#+BEGIN_SRC emacs-lisp

  (unless dw/is-termux
    (use-package twilight-anti-bright-theme :ensure t :defer t)
    (use-package material-theme :ensure t :defer t)
    (use-package badger-theme :ensure t :defer t)
    (use-package spacegray-theme :ensure t :defer t)
    (use-package nord-theme :ensure t :defer t)
    (use-package noctilux-theme :ensure t :defer t)
    (use-package zerodark-theme :ensure t :defer t) ; Also: (zerodark-setup-modeline-format)
    (use-package color-theme-sanityinc-tomorrow :ensure t :defer t)

    ;(load-theme 'twilight-anti-bright)
    ;(load-theme 'nord t)
    ;(color-theme-sanityinc-tomorrow-night)
    (load-theme 'spacegray t))

#+END_SRC

Themes to try:

- https://github.com/jordonbiondo/ample-theme
- https://github.com/gchp/flatland-emacs
- https://github.com/hlissner/emacs-doom-themes/tree/screenshots

*** Font

**** Set the font

Different platforms need different default font sizes, and
[[https://mozilla.github.io/Fira/][Fira Mono]] is currently my favorite face.

#+BEGIN_SRC emacs-lisp

  ;; Set the font face based on platform
  (on-platform-do
   ((windows cygwin) (set-face-attribute 'default nil :font "Fira Mono:antialias=subpixel" :height 130))
    (osx (set-face-attribute 'default nil :font "Fira Mono" :height 170))
    (linux (set-face-attribute 'default nil :font "Fira Code" :height 120)))

#+END_SRC

*** Mode Line

**** Basic Customization

#+begin_src emacs-lisp

  (setq display-time-format "%l:%M %p %b %y"
        global-mode-string '("" (:eval mu4e-alert-mode-line) display-time-string))

#+end_src

**** Enable Mode Diminishing

The [[https://github.com/myrjola/diminish.el][diminish]] package hides pesky minor modes from the modelines.

#+BEGIN_SRC emacs-lisp

  (use-package diminish :ensure t)

#+END_SRC

**** Smart Mode Line

Prettify the modeline with [[https://github.com/Malabarba/smart-mode-line/][smart-mode-line]].  Really need to re-evaluate the
ordering of =mode-line-format=.  Also not sure if =rm-excluded-modes= is needed
anymore if I set up =diminish= correctly.

#+BEGIN_SRC emacs-lisp

  (use-package smart-mode-line
    :ensure t
    :disabled
    :config
    (progn
      (sml/setup)
      (sml/apply-theme 'respectful)  ; Respect the theme colors
      (setq sml/mode-width 'right
            sml/name-width 60)

      (setq-default mode-line-format
        `("%e"
          ,(when dw/exwm-enabled
             '(:eval (format "[%d] " exwm-workspace-current-index)))
          mode-line-front-space
          mode-line-mule-info
          mode-line-client
          mode-line-modified
          mode-line-remote
          mode-line-frame-identification
          mode-line-buffer-identification
          sml/pos-id-separator
          (vc-mode vc-mode)
          " "
          ;mode-line-position
          evil-mode-line-tag
          sml/pre-modes-separator
          mode-line-modes
          " "
          mode-line-misc-info))

      (setq rm-excluded-modes
        (mapconcat
         'identity
         ; These names must start with a space!
         '(" GitGutter" " MRev" " company"
           " Helm" " Undo-Tree" " Projectile.*" " Z" " Ind"
           " Org-Agenda.*" " ElDoc" " SP/s" " cider.*")
         "\\|"))))

#+END_SRC

**** spaceline

#+begin_src emacs-lisp

  (use-package spaceline
    :ensure t
    :disabled
    :config
    ;(spaceline-emacs-theme)
    (spaceline-spacemacs-theme)
    (setq powerline-default-separator 'bar)
    (spaceline-compile
      ; left side
      '((exwm-workspace-number
         :face highlight-face
         :priority 100)
        (evil-state
         :face highlight-face
         :priority 100)
        (anzu :priority 95)
        auto-compile
        ((buffer-modified buffer-size buffer-id remote-host)
          :priority 98)
        (major-mode :priority 79)
        (process :when active)
        ((flycheck-error flycheck-warning flycheck-info)
          :when active
          :priority 89)
        (minor-modes :when active
                     :priority 9)
        (mu4e-alert-segment :when active)
        (erc-track :when active)
        (version-control :when active
                         :priority 78)
        (org-pomodoro :when active)
        (org-clock :when active))

       ; right side
       '(which-function
         (purpose :priority 94)
         (battery :when active)
         (selection-info :priority 95)
         input-method
         ((buffer-encoding-abbrev
           point-position
           line-column)
          :separator " | "
          :priority 96)
         (global :when active))))
         ;(buffer-position :priority 99)
         ;(hud :priority 99))))

#+end_src

**** telephone-line

#+begin_src emacs-lisp

  (use-package telephone-line
    :ensure t
    :disabled
    :config
    (setq telephone-line-evil-use-short-tag t
          telephone-line-primary-left-separator telephone-line-flat
          telephone-line-primary-right-separator telephone-line-flat
          telephone-line-rhs
            '((nil telephone-line-flycheck-segment telephone-line-misc-info-segment)
              (accent telephone-line-major-mode-segment)
              (evil telephone-line-airline-position-segment)))
    (telephone-line-mode 1))

#+end_src

**** Doom Modeline

#+begin_src emacs-lisp

  ;; You must run (all-the-icons-install-fonts) one time after
  ;; installing this package!

  (use-package minions
    :ensure t
    :hook (doom-modeline-mode . minions-mode)
    :custom
    (minions-mode-line-lighter ""))

  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-init)
    :config
    (setq doom-modeline-lsp t
          doom-modeline-github nil
          doom-modeline-width 3
          doom-modeline-minor-modes t
          doom-modeline-buffer-file-name-style 'truncate-except-project
          doom-modeline-major-mode-color-icon t))

#+end_src

*** File Backups

Useful information can be found on the [[https://www.emacswiki.org/emacs/AutoSave][EmacsWiki]].  I generally don't like these
files hanging around so I've moved them to a backups folder in my =~/.emacs.d/=.

#+BEGIN_SRC emacs-lisp

  ;; Store file backups in a central location
  (setq backup-directory-alist
        `(("." . ,(concat user-emacs-directory "backups"))))

#+END_SRC

*** Auto-Saving Changed Files

#+BEGIN_SRC emacs-lisp

  (use-package super-save
    :ensure t
    :diminish super-save-mode
    :config
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t))

#+END_SRC

*** Auto-Reverting Changed Files

#+BEGIN_SRC emacs-lisp

  (global-auto-revert-mode 1)

#+END_SRC

*** Focusing Sections

#+BEGIN_SRC emacs-lisp

  (use-package focus
    :ensure t)

#+END_SRC

*** UI Toggles

#+BEGIN_SRC emacs-lisp

  (dw/leader-key-def
    "t"  '(:ignore t :which-key "toggles")
    "tw" 'whitespace-mode
    "tt" '(counsel-load-theme :which-key "choose theme"))

#+END_SRC

*** File Tree

#+begin_src emacs-lisp

  (use-package neotree
    :ensure t
    :config
    (setq neo-vc-integration '(face)))

#+end_src

*** Displaying World Time

=display-time-world= command provides a nice display of the time at a specified
list of timezones.  Nice for working in a team with remote members.

#+begin_src emacs-lisp

  (setq display-time-world-list
    '(("America/Los_Angeles" "Seattle")
      ("America/New_York" "New York")
      ("Europe/Athens" "Athens")
      ("Pacific/Auckland" "Auckland")
      ("Asia/Shanghai" "Shanghai")))
  (setq display-time-world-time-format "%a, %d %b %I:%M %p %Z")

#+end_src

*** Pinentry

Emacs can be prompted for the PIN of GPG private keys, we just need to set
=epa-pinentry-mode= to accomplish that:

#+begin_src emacs-lisp

  (setq epa-pinentry-mode 'loopback)
  (pinentry-start)

#+end_src

** Editing Configuration

*** Tab Widths

#+begin_src emacs-lisp

(setq tab-width 2)
(setq evil-shift-width tab-width)

#+end_src>

*** Bracket and quote pair completion

Turn on =electric-pair-mode= for quote, paren, and bracket completion.

#+BEGIN_SRC emacs-lisp

  (electric-pair-mode 1)

#+END_SRC

Use spaces instead of tabs for indentation.

#+BEGIN_SRC emacs-lisp

  (setq-default indent-tabs-mode nil)

#+END_SRC

*** Commenting Lines

#+BEGIN_SRC emacs-lisp

  (use-package evil-nerd-commenter
    :ensure t
    :config
    (global-set-key (kbd "M-/") 'evilnc-comment-or-uncomment-lines))

#+END_SRC

*** Automatically clean whitespace

#+BEGIN_SRC emacs-lisp

  ;; This configuration seems to work but might need tweaking
  (setq whitespace-action '(auto-cleanup))
  (setq whitespace-style '(trailing space-before-tab indentation empty space-after-tab))
  (global-whitespace-mode)

#+END_SRC

*** Use Parinfer for Lispy languages

#+BEGIN_SRC emacs-lisp

  (use-package parinfer
    :ensure t
    :init
    (progn
      (setq parinfer-extensions
            '(defaults       ; should be included.
              pretty-parens  ; different paren styles for different modes.
              evil           ; If you use Evil.
              smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
              smart-yank))   ; Yank behavior depend on mode.
      (add-hook 'clojure-mode-hook #'parinfer-mode)
      (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
      (add-hook 'common-lisp-mode-hook #'parinfer-mode)
      (add-hook 'scheme-mode-hook #'parinfer-mode)
      (add-hook 'lisp-mode-hook #'parinfer-mode))

    (dw/leader-key-def
      "tp" 'parinfer-toggle-mode))

#+END_SRC

** Configuration File

*** Helpers

#+BEGIN_SRC emacs-lisp

  (defun reload-configuration ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))

  (defun edit-configuration ()
    (interactive)
    (find-file (expand-file-name "~/.emacs.d/config.org")))

#+END_SRC

*** Bindings

#+BEGIN_SRC emacs-lisp

  (dw/leader-key-def
    "fe"  '(:ignore t :which-key "config file")
    "fed" '(edit-configuration :which-key "edit config")
    "feR" '(reload-configuration :which-key "reload config")

    "fd"  '(:ignore t :which-key "dotfiles")
    "fdi" '((lambda () (interactive) (find-file "~/.dotfiles/i3/config")) :which-key "i3")
    "fdv" '((lambda () (interactive) (find-file "~/.dotfiles/vim/vimrc")) :which-key "vimrc")
    "fdq" '((lambda () (interactive) (find-file "~/.dotfiles/qutebrowser/config.py")) :which-key "vimrc")
    "fdz" '((lambda () (interactive) (find-file "~/.dotfiles/zsh/zshrc")) :which-key "zsh"))

#+END_SRC

** Stateful Keymaps with Hydra

#+begin_src emacs-lisp

  (use-package hydra
    :ensure t)

#+end_src

** Better Completions with Ivy

I currently use Ivy, Counsel, and Swiper to navigate around files, buffers, and
projects super quickly.  Here are some workflow notes on how to best use Ivy:

- While in an Ivy minibuffer, you can search within the current results by using =S-Space=.
- To quickly jump to an item in the minibuffer, use =C-'= to get Avy line jump keys.
- To see actions for the selected minibuffer item, use =M-o= and then press the
  action's key.

#+BEGIN_SRC emacs-lisp

  (use-package ivy
    :ensure t
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :init
    (ivy-mode 1)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-height 15)
    (setq ivy-wrap t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    (setq ivy-initial-inputs-alist nil)) ;; Don't start search with ^

  (use-package ivy-hydra
    :ensure t)

  (use-package counsel
    :ensure t
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)))

  (use-package smex ;; Adds M-x recent command sorting for counsel-M-x
    :after (counsel)
    :ensure t)

  (dw/leader-key-def
    "r"   '(ivy-resume :which-key "ivy resume")
    "f"   '(:ignore t :which-key "files")
    "ff"  '(counsel-find-file :which-key "open file")
    "fr"  '(counsel-recentf :which-key "recent files")
    "fR"  '(revert-buffer :which-key "revert file")
    "fj"  '(counsel-file-jump :which-key "jump to file"))

#+END_SRC

** Jumping with Avy

#+BEGIN_SRC emacs-lisp

  (use-package avy :ensure t)

  (dw/leader-key-def
    "j"   '(:ignore t :which-key "jump")
    "jj"  '(avy-goto-char :which-key "jump to char")
    "jw"  '(avy-goto-word-0 :which-key "jump to word")
    "jl"  '(avy-goto-line :which-key "jump to line"))

#+END_SRC

** Buffer Management

*** Buffer Flipping

#+BEGIN_SRC emacs-lisp

  (defun dw/iflip-buffer-reset ()
    (interactive)
    (iflipb-restore-buffers))

  (defhydra hydra-flip-buffer (:timeout 4)
    "Flipping Buffers"
    ("j" iflipb-next-buffer "next")
    ("h" iflipb-next-buffer "next" :exit t)
    ("k" iflipb-previous-buffer "prev")
    ("r" dw/iflip-buffer-reset "reset" :exit t)
    ("f" nil "exit" :exit t))

  (use-package iflipb
    :ensure t
    :bind (("C-;" . 'hydra-flip-buffer/body)
           ("<s-tab>" . 'iflipb-next-buffer)
           ("<s-iso-lefttab>" . 'iflipb-previous-buffer))
    :config
    (setq iflipb-ignore-buffers nil) ; Should tighten this in the future
    (setq iflipb-wrap-around nil))

  ;; (use-package buffer-flip
  ;;   :ensure t
  ;;   :config
  ;;   (setq buffer-flip-map
  ;;         (let ((map (make-sparse-keymap)))
  ;;           (define-key map (kbd "<tab>")   'buffer-flip-forward)
  ;;           (define-key map (kbd "<backtab>") 'buffer-flip-backward)
  ;;           (define-key map (kbd "C-g")     'buffer-flip-abort)
  ;;           map)))

#+END_SRC

*** Helpers

Simplify new buffer creation:

#+BEGIN_SRC emacs-lisp



#+END_SRC

This may not be needed for much longer now that I'm using =buffer-flip= but
keeping it around for now.

#+BEGIN_SRC emacs-lisp

  (defun switch-to-previous-buffer ()
    (interactive)
    (switch-to-buffer (other-buffer)))

#+END_SRC

*** Bindings

#+BEGIN_SRC emacs-lisp

  (defun dw/use-ctrl-semi-message ()
    (interactive)
    (message "Use C-; yo."))

  (dw/leader-key-def
    "TAB" 'dw/use-ctrl-semi-message
    "b"   '(:ignore t :which-key "buffers")
    "bb"  'counsel-switch-buffer
    "bd"  'evil-delete-buffer)

#+END_SRC

** Window Management

*** Frame Scaling / Zooming

The keybindings for this are =C+M+-= and =C+M+==.

#+BEGIN_SRC emacs-lisp

  (use-package default-text-scale
    :ensure t
    :init (default-text-scale-mode))

#+END_SRC

*** Workspaces

I really need a better way to manage windows in Emacs.  Holding off on Eyebrowse
for now, need to investigate the =perspective= varieties.

#+BEGIN_SRC emacs-lisp

;(use-package eyebrowse
;  :ensure t
;  :config
;  (eyebrowse-mode t)
;  (general-define-key
;    :states '(normal)
;    :prefix spc-leader
;    "1"  '(eyebrowse-switch-to-window-config-1 :which-key "workspace 1")
;    "2"  '(eyebrowse-switch-to-window-config-2 :which-key "workspace 2")
;    "3"  '(eyebrowse-switch-to-window-config-3 :which-key "workspace 3")
;    "4"  '(eyebrowse-switch-to-window-config-4 :which-key "workspace 4")))

#+END_SRC

*** Auto-sizing Windows with Zoom

#+BEGIN_SRC emacs-lisp

  ;; (use-package zoom
  ;;   :ensure t
  ;;   :init (zoom-mode t)
  ;;   :config
  ;;   ;; Use the golden ratio for sizing
  ;;   (custom-set-variables
  ;;     '(zoom-size '(0.618 . 0.618))))

#+END_SRC

*** Window History with winner-mode

#+BEGIN_SRC emacs-lisp

  (winner-mode)

#+END_SRC

*** Bindings

#+BEGIN_SRC emacs-lisp

  (dw/leader-key-def
    "w"   '(:ignore t :which-key "windows")
    "wc"  '(evil-window-delete :which-key "close")
    "wC"  '(delete-other-windows :which-key "close others")
    "ws"  '(evil-window-split  :which-key "split horiz")
    "wv"  '(evil-window-vsplit :which-key "split vert")
    "wo"  '(other-window :which-key "other window")

    "wu"  '(winner-undo :which-key "undo window")
    "wr"  '(winner-redo :which-key "redo window")

    "wh"  '(evil-window-left  :which-key "window left")
    "wl"  '(evil-window-right :which-key "window right")
    "wk"  '(evil-window-up    :which-key "window up")
    "wj"  '(evil-window-down  :which-key "window down"))

#+END_SRC

*** exwm

**** Helper Functions

#+BEGIN_SRC emacs-lisp

  (defun exwm/run-in-background (command)
     (start-process-shell-command command nil
                                  command))

  (defun exwm/bind-function (key invocation &rest bindings)
    "Bind KEYs to FUNCTIONs globally"
    (while key
      (exwm-input-set-key (kbd key)
                          `(lambda ()
                             (interactive)
                             ,invocation))
      (setq key (pop bindings)
            command
            (pop bindings))))

  (defun exwm/bind-command (key command &rest bindings)
    "Bind KEYs to COMMANDs globally"
    (while key
      (exwm-input-set-key (kbd key)
                          `(lambda ()
                             (interactive)
                             (exwm/run-in-background ,command)))
      (setq key (pop bindings)
            command
            (pop bindings))))

#+END_SRC

**** Configuration

#+BEGIN_SRC emacs-lisp

  (defun dw/exwm-init-hook ()
    ;; Make workspace 1 be the one where we land at startup
    (exwm-workspace-switch-create 1)

    ;; Launch apps that will run in the background
    (exwm/run-in-background "nm-applet")
    (exwm/run-in-background "QSyncthingTray")
    (exwm/run-in-background "redshift -l 47.675510:-122.203362 -t 6500:3500"))

  (use-package exwm
    :if dw/exwm-enabled
    :hook (exwm-init . dw/exwm-init-hook)
    :config
    (setq display-time-default-load-average nil)
    (display-time-mode 1)

    ;;(setq exwm-workspace-show-all-buffers t)

    (add-hook 'exwm-mode-hook
              (lambda ()
                (git-gutter-mode 0)
                (evil-local-set-key 'motion (kbd "C-u") nil)))

    (defun dw/move-window-by-class ()
      (interactive)
      (pcase exwm-class-name
        ("Pidgin" (exwm-workspace-move-window 0))
        ("Pidgin<2>" (exwm-workspace-move-window 0))
        ("teams-for-linux" (exwm-workspace-move-window 3))
        ("Spotify" (exwm-workspace-move-window 4))))

    ;; Manipulate windows as they're created
    (add-hook 'exwm-manage-finish-hook
              (lambda ()
                ;; Send the window where it belongs
                (dw/move-window-by-class)

                ;; Hide the modeline on all X windows
                (exwm-layout-hide-mode-line)))

    ;; Hide the modeline on all X windows
    (add-hook 'exwm-floating-setup-hook
              (lambda ()
                (exwm-layout-hide-mode-line))))

  (use-package exwm-systemtray
    :after (exwm)
    :config
    (exwm-systemtray-enable)
    (setq exwm-systemtray-height 35))

#+END_SRC

**** Desktop Configuration

#+BEGIN_SRC emacs-lisp

  (defun dw/run-xmodmap ()
    (interactive)
    (start-process-shell-command "xmodmap" nil "xmodmap ~/.dotfiles/.config/i3/Xmodmap"))

  (defun dw/update-wallpapers ()
    (interactive)
    (start-process-shell-command "feh" nil "feh --bg-scale ~/.dotfiles/backgrounds/mountains-1412683.jpg"))

  (defun dw/update-screen-layout ()
    (interactive)
    (let ((layout-script "~/.bin/update-screens.sh"))
       (message "Running screen layout script: %s" layout-script)
       (start-process-shell-command "xrandr" nil layout-script)))

  (defun dw/configure-desktop ()
    (interactive)
      (dw/run-xmodmap)
      (dw/update-screen-layout)
      (dw/update-wallpapers))

  (when dw/exwm-enabled
    ;; Configure the desktop for first load and then listen
    ;; for any future screen changes (connecting to docks, etc)
    (dw/configure-desktop)
    (add-hook 'exwm-randr-screen-change-hook #'dw/configure-desktop))

#+END_SRC

**** Window Switcher

#+begin_src emacs-lisp

  (defalias 'switch-to-buffer-original 'exwm-workspace-switch-to-buffer)
  ;; (defalias 'switch-to-buffer 'exwm-workspace-switch-to-buffer)

  ;; (defun dw/counsel-switch-buffer ()
  ;;   "Switch to another buffer.
  ;; Display a preview of the selected ivy completion candidate buffer
  ;; in the current window."
  ;;   (interactive)
  ;;   (ivy-read "Switch to buffer: " 'internal-complete-buffer
  ;;             :preselect (buffer-name (other-buffer (current-buffer)))
  ;;             :keymap ivy-switch-buffer-map
  ;;             :action #'ivy--switch-buffer-action
  ;;             :matcher #'ivy--switch-buffer-matcher
  ;;             :caller 'counsel-switch-buffer
  ;;             :unwind #'counsel--switch-buffer-unwind
  ;;             :update-fn 'counsel--switch-buffer-update-fn)
  ;; )

#+end_src

**** Keybindings

#+BEGIN_SRC emacs-lisp

  (when dw/exwm-enabled
    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
      '(?\C-x
        ?\C-h
        ?\M-x
        ?\M-`
        ?\M-&
        ?\M-:
        ?\C-\  ;; Ctrl+Space
        ?\C-\;))

    ;; Ctrl+Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    (exwm/bind-command
      "<s-return>" "xfce4-terminal"
      "s-p" "playerctl play-pause"
      "s-[" "playerctl previous"
      "s-]" "playerctl next")

    (use-package desktop-environment
      :ensure t
      :after exwm
      :init (desktop-environment-mode)
      :custom
      (desktop-environment-brightness-small-increment "2%+")
      (desktop-environment-brightness-small-decrement "2%-")
      (desktop-environment-brightness-normal-increment "5%+")
      (desktop-environment-brightness-normal-decrement "5%-"))

    ;; This needs a more elegant ASCII banner
    (defhydra hydra-exwm-move-resize (:timeout 4)
      "Move/Resize Window (Shift is bigger steps, Ctrl moves window)"
      ("j" (lambda () (interactive) (exwm-layout-enlarge-window 10)) "V 10")
      ("J" (lambda () (interactive) (exwm-layout-enlarge-window 30)) "V 30")
      ("k" (lambda () (interactive) (exwm-layout-shrink-window 10)) "^ 10")
      ("K" (lambda () (interactive) (exwm-layout-shrink-window 30)) "^ 30")
      ("h" (lambda () (interactive) (exwm-layout-shrink-window-horizontally 10)) "< 10")
      ("H" (lambda () (interactive) (exwm-layout-shrink-window-horizontally 30)) "< 30")
      ("l" (lambda () (interactive) (exwm-layout-enlarge-window-horizontally 10)) "> 10")
      ("L" (lambda () (interactive) (exwm-layout-enlarge-window-horizontally 30)) "> 30")
      ("C-j" (lambda () (interactive) (exwm-floating-move 0 10)) "V 10")
      ("C-S-j" (lambda () (interactive) (exwm-floating-move 0 30)) "V 30")
      ("C-k" (lambda () (interactive) (exwm-floating-move 0 -10)) "^ 10")
      ("C-S-k" (lambda () (interactive) (exwm-floating-move 0 -30)) "^ 30")
      ("C-h" (lambda () (interactive) (exwm-floating-move -10 0)) "< 10")
      ("C-S-h" (lambda () (interactive) (exwm-floating-move -30 0)) "< 30")
      ("C-l" (lambda () (interactive) (exwm-floating-move 10 0)) "> 10")
      ("C-S-l" (lambda () (interactive) (exwm-floating-move 30 0)) "> 30")
      ("f" nil "finished" :exit t))

    ;; Workspace switching
    (setq exwm-input-global-keys
           `(([?\s-\C-r] . exwm-reset)
             ([?\s-w] . exwm-workspace-switch)
             ([?\s-r] . hydra-exwm-move-resize/body)
             ([?\s-e] . dired-jump)
             ([?\s-E] . (lambda () (interactive) (dired "~")))
             ([?\s-Q] . (lambda () (interactive) (kill-buffer)))
             ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))
             ,@(mapcar (lambda (i)
                         `(,(kbd (format "s-%d" i)) .
                            (lambda ()
                             (interactive)
                             (exwm-workspace-switch-create ,i))))
                        (number-sequence 0 9))))

    (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)
    (exwm-input-set-key (kbd "s-f") 'exwm-layout-toggle-fullscreen)

    (exwm-input-set-key (kbd "s-C-s") (lambda () (interactive) (exwm-workspace-switch-to-buffer "Slack")))
    (exwm-input-set-key (kbd "s-C-i") (lambda () (interactive) (exwm-workspace-switch-to-buffer "Pidgin<2>"))))

#+END_SRC

**** Useful Links

- https://github.com/ch11ng/exwm/wiki
- https://www.reddit.com/r/emacs/comments/6huok9/exwm_configs/
- https://ambrevar.xyz/de/index.html

** Expand Region

This module is absolutely necessary for working inside of Emacs Lisp files,
especially when trying to some parent of an expression (like a =setq=).  Makes
tweaking Org agenda views much less annoying.

#+BEGIN_SRC emacs-lisp

  (use-package expand-region
    :ensure t
    :bind (("M-[" . 'er/expand-region)
           ("C-(" . 'er/mark-outside-pairs)))

#+END_SRC

** Credential Management

I use [[https://www.passwordstore.org/][pass]] to manage all of my passwords locally.  [[https://github.com/jabranham/helm-pass][helm-pass]] automatically pulls
in [[https://git.zx2c4.com/password-store/tree/contrib/emacs][password-store.el]] package which makes managing passwords much easier in
Emacs.

#+BEGIN_SRC emacs-lisp

  (use-package helm-pass
    :ensure t
    :config
    (setq password-store-password-length 12))

  (dw/leader-key-def
    "ap" '(:ignore t :which-key "pass")
    "app" 'helm-pass
    "api" 'password-store-insert
    "apg" 'password-store-generate)

#+END_SRC

Also, use a custom =auth-source= path so that it's easier to store encrypted
credentials for mail, etc.

#+BEGIN_SRC emacs-lisp

  (setq auth-sources
    '((:source "~/.emacs.d/secrets/.authinfo.gpg")))

#+END_SRC

** File Browsing

*** Dired

#+BEGIN_SRC emacs-lisp

  (use-package dired-rainbow
    :ensure t
    :config
    (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
    (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
    (dired-rainbow-define log "#c17d11" ("log"))
    (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
    (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))

  (use-package dired-single :ensure t)
  (use-package dired-ranger :ensure t)
  (use-package dired-collapse :ensure t)

  (setq dired-listing-switches "-agho --group-directories-first")

  (load "dired-x")
  (setq dired-omit-files "^\\.[^.].*")

  (add-hook 'dired-load-hook
    (lambda ()
      (interactive)
      (dired-collapse)))

  (add-hook 'dired-mode-hook
    (lambda ()
      (interactive)
      (dired-omit-mode 1)
      (hl-line-mode 1)))

  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "H" 'dired-omit-mode
    "l" 'dired-single-buffer
    "y" 'dired-ranger-copy
    "X" 'dired-ranger-move
    "p" 'dired-ranger-paste)

#+END_SRC

*** Opening Files Externally

#+begin_src emacs-lisp

  (use-package openwith
    :ensure t
    :config
    (setq openwith-associations
      (list
        (list (openwith-make-extension-regexp
               '("mpg" "mpeg" "mp3" "mp4"
                 "avi" "wmv" "wav" "mov" "flv"
                 "ogm" "ogg" "mkv"))
               "mpv"
               '(file))
        (list (openwith-make-extension-regexp
               '("xbm" "pbm" "pgm" "ppm" "pnm"
                 "png" "gif" "bmp" "tif" "jpeg" "jpg"))
               "feh"
               '(file))))
    (openwith-mode 1))

#+end_src

** Org Mode

[[http://orgmode.org/][Org Mode]] is the best life management system I've ever encountered.  Most of my
configuration sculpting effort will be poured into making Org Mode handle
everything in my life.

*** Org Configuration

#+BEGIN_SRC emacs-lisp

    (setq org-ellipsis " »")
    (setq org-hide-emphasis-markers t)
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)

    (setq-default fill-column 80)

    ;; Turn on indentation and auto-fill mode for Org files
    (defun dw/do-org-hooks ()
      (org-indent-mode)
      (turn-on-auto-fill)
      (diminish org-indent-mode))

    (add-hook 'org-mode-hook 'dw/do-org-hooks)

    (setq org-modules
      '(org-crypt
        org-habit
        org-bookmark
        org-eshell
        org-notmuch
        org-irc))

  (setq org-refile-targets '((nil :maxlevel . 3)
                             (org-agenda-files :maxlevel . 3)))
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-use-outline-path t)

  (evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)

  (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)

#+END_SRC

*** Header Styling

Use bullet characters instead of asterisks, plus set the header font sizes to something more palatable.

#+BEGIN_SRC emacs-lisp

  (use-package org-bullets
    :ensure t
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))
    :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))

  (defun dw/set-org-header-font-sizes ()
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.0)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.0)))
      (set-face-attribute (car face) nil :weight 'normal :height (cdr face))))

  (add-hook 'org-mode-hook 'dw/set-org-header-font-sizes)

#+END_SRC

*** Org File Paths

#+BEGIN_SRC emacs-lisp

  (setq org-directory
    (if dw/is-termux
        "~/storage/shared/Notes"
        "~/Notes"))

  (defun dw/org-path (path)
    (expand-file-name path org-directory))

  (setq org-journal-dir (dw/org-path "Journal/"))

  (defun dw/get-todays-journal-file-name ()
    "Gets the journal file name for today's date"
    (interactive)
    (let* ((journal-file-name
             (expand-file-name
               (format-time-string "%Y/%Y-%2m-%B.org")
               org-journal-dir))
           (journal-year-dir (file-name-directory journal-file-name)))
      (if (not (file-directory-p journal-year-dir))
        (make-directory journal-year-dir))
      journal-file-name))

  (setq org-default-notes-file (dw/org-path "Projects.org"))

  (setq org-agenda-files
    (list
      (dw/org-path "Habits.org")
      (dw/org-path "Calendar.org")
      (dw/org-path "Projects.org")))
      ;(dw/get-todays-journal-file-name)))

#+END_SRC

*** Agenda

#+BEGIN_SRC emacs-lisp

  (setq org-agenda-window-setup 'other-window)
  (setq org-agenda-span 'day)
  (setq org-stuck-projects '("+LEVEL=2/TODO" ("NEXT") nil ""))
  (setq org-agenda-start-with-log-mode t)

  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
    '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "PROC" ((org-agenda-overriding-header "Process Tasks")))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))
        ;; (todo "TODO"
        ;;   ((org-agenda-overriding-header "Unprocessed Inbox Tasks")
        ;;    (org-agenda-files `(,dw/org-inbox-path))
        ;;    (org-agenda-text-search-extra-files nil)))))

      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("p" "Active Projects"
       ((agenda "")
        (todo "ACTIVE"
          ((org-agenda-overriding-header "Active Projects")
           (org-agenda-max-todos 5)
           (org-agenda-files org-agenda-files)))))

      ("w" "Workflow Status"
       ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
               (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
               (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
               (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
               (org-agenda-files org-agenda-files)))))

      ;; Projects on hold
      ("h" tags-todo "+LEVEL=2/+HOLD"
       ((org-agenda-overriding-header "On-hold Projects")
        (org-agenda-files org-agenda-files)))

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))))

#+END_SRC

*** Tags

#+BEGIN_SRC emacs-lisp

  ;; Configure common tags
  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@errand" . ?E)
       ("@home" . ?H)
       ("@work" . ?W)
       ("agenda" . ?a)
       ("planning" . ?p)
       ("publish" . ?P)
       ("batch" . ?b)
       ("note" . ?n)
       ("idea" . ?i)
       ("thinking" . ?t)
       ("recurring" . ?r)))

  ;; Configure task state change tag triggers
  ;; (setq org-todo-state-tags-triggers
  ;;   (quote (("CANC" ("cancelled" . t))
  ;;           ("WAIT" ("waiting" . t))
  ;;           ("HOLD" ("waiting") ("onhold" . t))
  ;;           (done ("waiting") ("onhold"))
  ;;           ("TODO" ("waiting") ("cancelled") ("onhold"))
  ;;           ("DONE" ("waiting") ("cancelled") ("onhold")))))

#+END_SRC

*** Tasks

#+BEGIN_SRC emacs-lisp

  ;; Configure TODO settings
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-datetree-add-timestamp 'inactive)
  (setq org-habit-graph-column 60)
  (setq org-fontify-whole-heading-line t)
  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "PROC" "|" "DONE(d!)")
      (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")
      (sequence "GOAL(g)" "|" "ACHIEVED(v)" "MAINTAIN(m)")))

#+END_SRC

*** Journal

I use my own custom journal file format based on Org datetrees.  In the future I
might go back to [[https://github.com/bastibe/org-journal/][org-journal]], keeping that configuration around.

#+BEGIN_SRC emacs-lisp

  ;(use-package org-journal
  ;  :ensure t
  ;  :config
  ;  (setq org-journal-dir "~/Notes/Journal/")
  ;  (setq org-journal-file-format "%Y-%m-%d.org"))

#+END_SRC

*** Capture Templates

Information on template expansion can be found in the [[https://orgmode.org/manual/Template-expansion.html#Template-expansion][Org manual]].

#+BEGIN_SRC emacs-lisp

  (setq org-capture-templates
    `(("t" "Tasks / Projects")
      ("tt" "Task" entry (file+olp ,(dw/org-path "Projects.org") "Projects" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
      ("ts" "Clocked Entry Subtask" entry (clock)
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
      ("tp" "New Project" entry (file+olp ,(dw/org-path "Projects.org") "Projects" "Inbox")
           "* PLAN %?\n  %U\n  %a\n  %i" :empty-lines 1)

      ("j" "Journal Entries")
      ("jj" "Journal" entry
           (file+olp+datetree ,(dw/get-todays-journal-file-name))
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)
      ("jk" "Morning Checklist" entry
           (file+olp+datetree ,(dw/get-todays-journal-file-name))
           "* %<%I:%M %p> - Morning Checklist :process:\n\n- [] Fill this in! %?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)
      ("jm" "Meeting" entry
           (file+olp+datetree ,(dw/get-todays-journal-file-name))
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)
      ("jt" "Thinking" entry
           (file+olp+datetree ,(dw/get-todays-journal-file-name))
           "\n* %<%I:%M %p> - %^{Topic} :thoughts:\n\n%?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)
      ("jc" "Clocked Entry Notes" entry
           (file+olp+datetree ,(dw/get-todays-journal-file-name))
           "* %<%I:%M %p> - %K :notes:\n\n%?"
           :empty-lines 1)
      ("jg" "Clocked General Task" entry
           (file+olp+datetree ,(dw/get-todays-journal-file-name))
           "* %<%I:%M %p> - %^{Task description} %^g\n\n%?"
           :clock-in :clock-resume
           :empty-lines 1)

      ("w" "Workflows")
      ("we" "Checking Email" entry (file+olp+datetree ,(dw/get-todays-journal-file-name))
           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

      ("m" "Metrics Capture")
      ("mw" "Weight" table-line (file+headline "~/Notes/Metrics.org" "Weight")
       "| %U | %^{Weight} | %^{Notes} |" :kill-buffer)
      ("mp" "Blood Pressure" table-line (file+headline "~/Notes/Metrics.org" "Blood Pressure")
       "| %U | %^{Systolic} | %^{Diastolic} | %^{Notes}" :kill-buffer)))

#+END_SRC

*** Block Templates

These templates enable you to type things like =<el= and then hit =Tab= to expand
the template.  More documentation can be found at the Org Mode [[https://orgmode.org/manual/Easy-templates.html][Easy Templates]]
documentation page.

#+BEGIN_SRC emacs-lisp

  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))

#+END_SRC

*** Pomodoro

#+BEGIN_SRC emacs-lisp

  (use-package org-pomodoro
    :ensure t
    :config
    (setq org-pomodoro-start-sound "~/.emacs.d/sounds/focus_bell.wav")
    (setq org-pomodoro-short-break-sound "~/.emacs.d/sounds/three_beeps.wav")
    (setq org-pomodoro-long-break-sound "~/.emacs.d/sounds/three_beeps.wav")
    (setq org-pomodoro-finished-sound "~/.emacs.d/sounds/meditation_bell.wav")
    (dw/leader-key-def
      "op"  '(org-pomodoro :which-key "pomodoro")))

#+END_SRC

*** Protocol

#+BEGIN_SRC emacs-lisp

(server-start)
(require 'org-protocol)

#+END_SRC

*** Bindings

#+BEGIN_SRC emacs-lisp

  (dw/leader-key-def
    "o"   '(:ignore t :which-key "org mode")

    "oi"  '(:ignore t :which-key "insert")
    "oil" '(org-insert-link :which-key "insert link")

    "on"  '(org-toggle-narrow-to-subtree :which-key "toggle narrow")

    "oa"  '(org-agenda :which-key "status")
    "oc"  '(org-capture t :which-key "capture")
    "ox"  '(org-export-dispatch t :which-key "export"))

#+END_SRC

**** Calendar Sync

#+BEGIN_SRC emacs-lisp

  ;; (use-package org-gcal
  ;;   :ensure t
  ;;   :config

  ;;   (setq org-gcal-client-id (password-store-get "API/Google/daviwil-emacs-id")
  ;;         org-gcal-client-secret (password-store-get "API/Google/daviwil-emacs-secret")
  ;;         org-gcal-file-alist `(("daviwil@github.com" . ,(dw/org-path "Calendar.org"))
  ;;                               (,(password-store-get "Misc/Calendars/GitHub/AtomTeam") . ,(dw/org-path "Calendar.org"))
  ;;                              )))

  ;; (dw/leader-key-def
  ;;   "ac"  '(:ignore t :which-key "calendar")
  ;;   "acs" '(org-gcal-fetch :which-key "sync"))

#+END_SRC

*** Reminders

#+BEGIN_SRC emacs-lisp

  ;; (use-package org-wild-notifier
  ;;   :ensure t
  ;;   :config
  ;;   ; Make sure we receive notifications for non-TODO events
  ;;   ; like those synced from Google Calendar
  ;;   (setq org-wild-notifier-keyword-whitelist nil)
  ;;   (setq org-wild-notifier-notification-title "Agenda Reminder")
  ;;   (setq org-wild-notifier-alert-time 15)
  ;;   (org-wild-notifier-mode))

#+END_SRC

*** Addons to Try

- The excellent [[https://github.com/fniessen/org-html-themes][ReadTheOrg]] HTML export theme, great for [[http://ivanmalison.github.io/dotfiles/][Emacs configs]].
- [[https://melpa.org/#/ox-reveal][Export to Reveal.js]]
- [[https://melpa.org/#/ox-gfm][Export to GitHub Flavored Markdown]]
- [[https://melpa.org/#/ox-twbs][Export to Twitter Bootstrap]]
- [[https://melpa.org/#/org-sync][Org Sync for external issue trackers]]
- [[https://github.com/magit/orgit][Org link to Magit buffers]]
- [[https://melpa.org/#/ob-typescript][TypeScript source blocks]]
- [[https://melpa.org/#/ob-rust][Rust source blocks]]
- [[https://melpa.org/#/org-board][Archive/bookmark sites with Org]]
- [[https://melpa.org/#/org-alert][org-alert]]
- [[https://github.com/bard/org-dashboard][org-dashboard]]
  - [[http://thehelpfulhacker.net/2014/07/19/a-dashboard-for-your-life-a-minimal-goal-tracker-using-org-mode-go-and-git/][Inspiration for this]]
- [[https://github.com/myuhe/org-gcal.el/][org-gcal]]
- [[https://github.com/org-mime/org-mime][org-mime]]

** Development

Configuration for various programming languages and dev tools that I use.

*** Git

**** Magit

https://magit.vc/manual/magit/

#+BEGIN_SRC emacs-lisp

  (use-package magit
    :ensure t
    :custom
    (global-magit-file-mode t)
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package evil-magit
    :ensure t
    :after magit)

  (dw/leader-key-def
    "g"   '(:ignore t :which-key "git")
    "gs"  'magit-status
    "gd"  'magit-diff-unstaged
    "gc"  'magit-branch-or-checkout
    "gl"   '(:ignore t :which-key "log")
    "glc" 'magit-log-current
    "glf" 'magit-log-buffer-file
    "gb"  'magit-branch
    "gP"  'magit-push-current
    "gp"  'magit-pull-branch
    "gf"  'magit-fetch
    "gF"  'magit-fetch-all
    "gr"  'magit-rebase)

#+END_SRC

**** Forge

From the author of Magit, this is a rich GitHub integration that uses a local
cache of issue and PR info to save your git status buffer's load time.  Magithub
is another option but it tries to fetch repo data each time you load the status
buffer, a bad thing for very popular repos.

Still haven't pulled this into my regular workflow yet, but I'm curious to see
how useful it will be.

#+BEGIN_SRC emacs-lisp

  (use-package forge
    :ensure t)

#+END_SRC

**** magit-todos

This is an interesting extension to Magit that shows a TODOs section in your
git status buffer containing all lines with TODO (or other similar words) in
files contained within the repo.  More information at the [[https://github.com/alphapapa/magit-todos][GitHub repo]].

#+begin_src emacs-lisp

  (use-package magit-todos
    :ensure t
    :after magit
    :config
    (magit-todos-mode 1))

#+end_src

**** git-link

#+begin_src emacs-lisp

  (use-package git-link
    :ensure t
    :config
    (setq git-link-open-in-browser t)
    (dw/leader-key-def
      "gL"  'git-link))

#+end_src

**** Git Gutter

#+BEGIN_SRC emacs-lisp

  (use-package git-gutter
    :ensure t
    :diminish
    :config
    (global-git-gutter-mode +1)
    (setq git-gutter:update-interval 2)
    (setq git-gutter:modified-sign "≡")
    (setq git-gutter:added-sign "≡")
    (setq git-gutter:deleted-sign "≡")
    (set-face-foreground 'git-gutter:modified "yellow")
    (set-face-foreground 'git-gutter:added "green")
    (set-face-foreground 'git-gutter:deleted "red"))

#+END_SRC

*** Projectile

**** Initial Setup

#+BEGIN_SRC emacs-lisp

  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :config (projectile-global-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (if (string= (window-system) "ns")
      (setq projectile-project-search-path '("~/Projects/Code" "~/Projects/Work"))
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :ensure t)

  (dw/leader-key-def
    "pf"  'counsel-projectile-find-file
    "ps"  'counsel-projectile-switch-project
    "pF"  'counsel-projectile-ag
    "pp"  'counsel-projectile
    "pc"  'projectile-compile-project
    "pd"  'projectile-dired)

#+END_SRC

**** Searching with =ag=

This package needs The Silver Searcher to be installed on the local machine.  On
Manjaro/Arch this is the =the_silver_searcher= package.

#+BEGIN_SRC emacs-lisp

  (use-package helm-ag
    :ensure t)

#+END_SRC

**** Project Configurations

This section contains project configurations for specific projects that I can't
drop a =.dir-locals.el= file into.  Documentation on this approach can be found in
the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Directory-Local-Variables.html][Emacs manual]].

#+BEGIN_SRC emacs-lisp

  (dir-locals-set-class-variables 'Atom
    `((nil . ((projectile-project-name . "Atom")
              (projectile-project-compilation-dir . nil)
              (projectile-project-compilation-cmd . "script/build")))))

  (dir-locals-set-directory-class (expand-file-name "~/Projects/Code/atom") 'Atom)

#+END_SRC

*** Completions

#+BEGIN_SRC emacs-lisp

  (use-package company
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-company-mode)

    (define-key company-active-map (kbd "<return>") #'company-complete-selection)
    (define-key prog-mode-map (kbd "TAB") #'company-indent-or-complete-common)

    ;; Make company inherit the Emacs theme more reliably
    (require 'color)
    (let ((bg (face-attribute 'default :background)))
      (custom-set-faces
       `(company-tooltip ((t (:inherit default :background ,(color-lighten-name bg 2)))))
       `(company-scrollbar-bg ((t (:background ,(color-lighten-name bg 10)))))
       `(company-scrollbar-fg ((t (:background ,(color-lighten-name bg 5)))))
       `(company-tooltip-selection ((t (:inherit font-lock-function-name-face))))
       `(company-tooltip-common ((t (:inherit font-lock-constant-face)))))))

  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode)
    :config
    (setq company-box-show-single-candidate t))

#+END_SRC

*** Languages

**** Language Server Support

#+BEGIN_SRC emacs-lisp

  (use-package ivy-xref
    :ensure t
    :init (if (< emacs-major-version 27)
            (setq xref-show-xrefs-function #'ivy-xref-show-xrefs)
            (setq xref-show-definitions-function #'ivy-xref-show-defs)))

  (use-package lsp-mode
    :ensure t
    :hook ((typescript-mode js2-mode web-mode) . lsp)
    :commands lsp)

  (dw/leader-key-def
    "l"  '(:ignore t :which-key "lsp")
    "ld" 'xref-find-definitions
    "lr" 'xref-find-references
    "ln" 'lsp-ui-find-next-reference
    "lp" 'lsp-ui-find-prev-reference
    "ls" 'counsel-imenu
    "le" 'lsp-ui-flycheck-list
    "lS" 'lsp-ui-sideline-mode
    "lX" 'lsp-execute-code-action)

  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-show))

  (use-package company-lsp
    :ensure t
    :after lsp-mode
    :commands company-lsp
    :config
    (push 'company-lsp company-backends)
    (company-mode)
    (setq company-minimum-prefix-length 1)
    (setq company-idle-delay 0)
    (setq company-lsp-cache-candidates 't))

  (use-package helm-lsp
    :ensure t
    :after lsp-mode
    :commands helm-lsp-workspace-symbol)

  (use-package lsp-treemacs
    :ensure t
    :after (lsp-mode treemacs))

#+END_SRC

**** Clojure

#+BEGIN_SRC emacs-lisp

  (use-package cider
    :ensure t
    :config
    (evil-collection-cider-setup))

  (use-package helm-cider
    :ensure t
    :config
    (helm-cider-mode 1))

#+END_SRC

**** Common Lisp

#+begin_src emacs-lisp

  (use-package sly
    :ensure t)

  (use-package slime
    :ensure t)

#+end_src>

**** TypeScript and JavaScript

Set up nvm so that we can manage Node versions

#+BEGIN_SRC emacs-lisp

  (use-package nvm
    :ensure t)

#+END_SRC

Configure TypeScript and JavaScript language modes

#+BEGIN_SRC emacs-lisp

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (company-mode +1))

  (use-package typescript-mode
    :ensure t
    :config
    (flycheck-mode)
    (setq typescript-indent-level 2))

  ;; (use-package tide
  ;;     :ensure t
  ;;     :after (typescript-mode web-mode company flycheck)
  ;;     :hook ((typescript-mode . setup-tide-mode)
  ;;            (javascript-mode . setup-tide-mode)
  ;;            (typescript-mode . tide-hl-identifier-mode)
  ;;            (before-save . tide-format-before-save))
  ;;     :config
  ;;     (setq tide-format-options
  ;;       '(:indentSize 2
  ;;         :tabSize 2
  ;;         :convertTabsToSpaces t))

  ;;     (require 'evil-collection-tide)
  ;;     (evil-collection-tide-setup)

  ;;     (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  ;;     (add-hook 'web-mode-hook
  ;;             (lambda ()
  ;;                 (when (string-equal "tsx" (file-name-extension buffer-file-name))
  ;;                 (setup-tide-mode))))

  ;;     (flycheck-add-mode 'typescript-tslint 'web-mode))

  (use-package js2-mode
    :ensure t
    :config
    ;; Use js2-mode for JavaScript files
    (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
    (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

    ;; Don't use built-in syntax checking
    (setq js2-mode-show-strict-warnings nil)

    ;; Set up proper indentation in JavaScript files
    (add-hook 'js2-mode-hook
      (setq js-indent-level 2)
      (setq evil-shift-width js-indent-level)
      (setq-default tab-width 2)))

  ;; (use-package indium
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'js-mode-hook #'indium-interaction-mode))

#+END_SRC





**** Rust

#+BEGIN_SRC emacs-lisp

  (use-package rust-mode
    :ensure t
    :mode "\\.rs\\'"
    :init (setq rust-format-on-save t))

  (use-package cargo :ensure t)

#+END_SRC

**** F#

#+begin_src emacs-lisp

  (use-package fsharp-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.fs[iylx]?$" . fsharp-mode)))

#+end_src

**** Emacs Lisp

#+BEGIN_SRC emacs-lisp

  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))

  (dw/leader-key-def
    "e"   '(:ignore t :which-key "eval")
    "eb"  '(eval-buffer :which-key "eval buffer"))

  (dw/leader-key-def
    :keymaps '(visual)
    "er" '(eval-region :which-key "eval region"))

#+END_SRC

**** Markdown

#+BEGIN_SRC emacs-lisp

  (use-package markdown-mode
    :ensure t
    :config
    (setq markdown-command "marked")
    (defun dw/set-markdown-header-font-sizes ()
      (dolist (face '((markdown-header-face-1 . 1.2)
                      (markdown-header-face-2 . 1.1)
                      (markdown-header-face-3 . 1.0)
                      (markdown-header-face-4 . 1.0)
                      (markdown-header-face-5 . 1.0)))
        (set-face-attribute (car face) nil :weight 'normal :height (cdr face))))

    (defun dw/markdown-mode-hook ()
      (turn-on-auto-fill)
      (dw/set-markdown-header-font-sizes))

    (add-hook 'markdown-mode-hook 'dw/markdown-mode-hook))

#+END_SRC

**** HTML

#+BEGIN_SRC emacs-lisp

  (use-package web-mode
    :ensure t
    :config
    (setq-default web-mode-code-indent-offset 2)
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-attribute-indent-offset 2)
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode)))
    ;; (add-hook 'web-mode-hook
    ;;   (add-to-list
    ;;     'auto-mode-alist
    ;;     '("\\.html?\\'" . web-mode))))

#+END_SRC

**** YAML

#+BEGIN_SRC emacs-lisp

  (use-package yaml-mode
    :ensure t)

#+END_SRC

*** Productivity

**** Syntax checking with Flycheck

#+BEGIN_SRC emacs-lisp

  (use-package flycheck
    :ensure t)

#+END_SRC

**** Snippets

#+BEGIN_SRC emacs-lisp

(use-package yasnippet
  :ensure t)

#+END_SRC

**** Smart Parens

#+BEGIN_SRC emacs-lisp

(use-package smartparens
  :ensure t
  :config
  (progn
    (require 'smartparens-config)
    (show-paren-mode 1)))

#+END_SRC

**** Rainbow Delimiters

#+BEGIN_SRC emacs-lisp

(use-package rainbow-delimiters
  :ensure t
  :config
  (progn
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))

#+END_SRC

*** Reference

**** HTTP

#+begin_src emacs-lisp

  (use-package know-your-http-well
    :ensure t)

#+end_src

** Writing

*** =darkroom= for distraction-free writing

#+begin_src emacs-lisp

  (use-package darkroom
    :ensure t
    :config
    (setq darkroom-text-scale-increase 0))

  (defun dw/enter-focus-mode ()
    (interactive)
    (darkroom-mode 1)
    (display-line-numbers-mode 0))

  (defun dw/leave-focus-mode ()
    (interactive)
    (darkroom-mode 0)
    (display-line-numbers-mode 1))

  (defun dw/toggle-focus-mode ()
    (interactive)
    (if (symbol-value darkroom-mode)
      (dw/leave-focus-mode)
      (dw/enter-focus-mode)))

  (dw/leader-key-def
    "tf" '(dw/toggle-focus-mode :which-key "focus mode"))

#+end_src

** Applications

*** Binding Prefix

#+BEGIN_SRC emacs-lisp

  (dw/leader-key-def
    "a"  '(:ignore t :which-key "apps"))

#+END_SRC

*** Mail

**** mu4e

[[http://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]] is seriously the best mail interface I've ever used because it's fast and
makes it really easy to power through a huge e-mail backlog.  Love the ability
to capture links to emails with org-mode too.

#+BEGIN_SRC emacs-lisp

  (setq dw/mail-enabled (eq system-name "zerocool"))

  (when (and (eq system-type 'gnu/linux) dw/mail-enabled)
    ;; After building/installing mu4e the .el files are here:
    ;;(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e") ;; On Fedora
    (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e") ;; On Manjaro / Arch

    (require 'mu4e)
    (require 'org-mu4e)
    (setq mail-user-agent 'mu4e-user-agent)

    ;; Refresh mail using offlineimap every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "offlineimap")
    (setq mu4e-maildir "~/Mail")

    ;; Set up contexts for email accounts
    (setq mu4e-contexts
     `( ,(make-mu4e-context
         :name "GitHub"
         :match-func (lambda (msg) (when msg
           (string-prefix-p "/GitHub" (mu4e-message-field msg :maildir))))
         :vars '(
           (user-full-name . "David Wilson")
           (user-email-address . "daviwil@github.com")
           (mu4e-sent-folder . "/GitHub/Sent Mail")
           (mu4e-trash-folder . "/GitHub/Trash")
           (mu4e-sent-messages-behavior . delete)
           ;(mu4e-refile-folder . "/GitHub/[Gmail].Archive")
           ))
       ,(make-mu4e-context
         :name "Fastmail"
         :match-func (lambda (msg) (when msg
           (string-prefix-p "/Fastmail" (mu4e-message-field msg :maildir))))
         :vars '(
           (user-full-name . "David Wilson")
           (user-email-address . "david@daviwil.com")
           (mu4e-sent-folder . "/Fastmail/Sent Items")
           (mu4e-trash-folder . "/Fastmail/Trash")
           (mu4e-drafts-folder . "/Fastmail/Drafts")
           (mu4e-refile-folder . "/Fastmail/Archive")
           (mu4e-sent-messages-behavior . sent)
           ))
       ,(make-mu4e-context
         :name "Personal"
         :match-func (lambda (msg) (when msg
           (string-prefix-p "/Personal" (mu4e-message-field msg :maildir))))
         :vars '(
           (mu4e-sent-folder . "/Personal/Sent")
           (mu4e-trash-folder . "/Personal/Deleted")
           (mu4e-refile-folder . "/Personal/Archive")
           ))
       ))
    (setq mu4e-context-policy 'pick-first)

    ;; Prevent mu4e from permanently deleting trashed items
    ;; This snippet was taken from the following article:
    ;; http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/
    (defun remove-nth-element (nth list)
      (if (zerop nth) (cdr list)
        (let ((last (nthcdr (1- nth) list)))
          (setcdr last (cddr last))
          list)))
    (setq mu4e-marks (remove-nth-element 5 mu4e-marks))
    (add-to-list 'mu4e-marks
         '(trash
           :char ("d" . "▼")
           :prompt "dtrash"
           :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
           :action (lambda (docid msg target)
                     (mu4e~proc-move docid
                        (mu4e~mark-check-target target) "-N"))))

    ;; Display options
    (setq mu4e-view-show-images t)
    (setq mu4e-view-show-addresses 't)

    ;; Sending mail
    (setq message-send-mail-function 'smtpmail-send-it
          smtpmail-smtp-server "smtp.fastmail.com"
          smtpmail-smtp-service 465
          smtpmail-stream-type  'ssl)

    ;; (See the documentation for `mu4e-sent-messages-behavior' if you have
    ;; additional non-Gmail addresses and want assign them different
    ;; behavior.)

    ;; setup some handy shortcuts
    ;; you can quickly switch to your Inbox -- press ``ji''
    ;; then, when you want archive some messages, move them to
    ;; the 'All Mail' folder by pressing ``ma''.
    (setq mu4e-maildir-shortcuts
        '( ("/INBOX"       . ?i)
           ("/Sent Mail"   . ?s)
           ("/Trash"       . ?t)
           ("/All Mail"    . ?a)))

    (add-to-list 'mu4e-bookmarks
           (make-mu4e-bookmark
            :name "All Inboxes"
            :query "maildir:/GitHub/INBOX OR maildir:/Fastmail/INBOX OR maildir:/Personal/Inbox"
            :key ?i))

    ;; don't keep message buffers around
    (setq message-kill-buffer-on-exit t)

    (setq dw/mu4e-inbox-query
        "(maildir:/Personal/Inbox OR maildir:/Fastmail/INBOX OR maildir:/GitHub/INBOX) AND flag:unread")

    (defun dw/go-to-inbox ()
      (interactive)
      (mu4e-headers-search dw/mu4e-inbox-query))

    (dw/leader-key-def
      "m"  '(:ignore t :which-key "mail")
      "mm" 'mu4e
      "mi" 'dw/go-to-inbox
      "ms" 'mu4e-update-mail-and-index)

    ;; Start mu4e in the background so that it syncs mail periodically
    (let ((current-prefix-arg '(4))) (call-interactively 'mu4e)))

#+END_SRC

Use [[https://github.com/iqbalansari/mu4e-alert][mu4e-alert]] to show notifications when e-mail comes in:

#+BEGIN_SRC emacs-lisp

  (when (and (eq system-type 'gnu/linux) dw/mail-enabled)
    (use-package mu4e-alert
      :ensure t
      :config
      ;; Use Emacs' built-in notifier
      (mu4e-alert-set-default-style 'notifications)

      ;; Show unread emails from all inboxes
      (setq mu4e-alert-interesting-mail-query dw/mu4e-inbox-query)

      (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
      (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)))

#+END_SRC

Useful mu4e manual pages:

- [[https://www.djcbsoftware.nl/code/mu/mu4e/MSGV-Keybindings.html#MSGV-Keybindings][Key bindings]]
- [[https://www.djcbsoftware.nl/code/mu/mu4e/Org_002dmode-links.html#Org_002dmode-links][org-mode integration]]

Here's some info on using [[https://hobo.house/2017/07/17/using-offlineimap-with-the-gmail-imap-api/][offlineimap with Gmail]].

*** Calendar

[[https://github.com/kiwanami/emacs-calfw][calfw]] is a gorgeous calendar UI that is able to show all of my scheduled Org
Agenda items.

#+BEGIN_SRC emacs-lisp

  (use-package calfw
    :ensure t
    :config
    (setq cfw:fchar-junction ?╋
          cfw:fchar-vertical-line ?┃
          cfw:fchar-horizontal-line ?━
          cfw:fchar-left-junction ?┣
          cfw:fchar-right-junction ?┫
          cfw:fchar-top-junction ?┯
          cfw:fchar-top-left-corner ?┏
          cfw:fchar-top-right-corner ?┓)

    (use-package calfw-org
      :ensure t
      :config
      (setq cfw:org-agenda-schedule-args '(:timestamp))))

  (dw/leader-key-def
    "cc"  '(cfw:open-org-calendar :which-key "calendar"))

#+END_SRC

*** eshell

**** Configuration

#+BEGIN_SRC emacs-lisp

  (use-package xterm-color
    :ensure t)

  (defun read-file (file-path)
    (with-temp-buffer
      (insert-file-contents file-path)
      (buffer-string)))

  (defun dw/get-current-package-version ()
    (interactive)
    (let ((package-json-file (concat (eshell/pwd) "/package.json")))
      (when (file-exists-p package-json-file)
        (let* ((package-json-contents (read-file package-json-file))
               (package-json (ignore-errors (json-parse-string package-json-contents))))
          (when package-json
            (ignore-errors (gethash "version" package-json)))))))

  (defun dw/map-line-to-status-char (line)
    (cond ((string-match "^?\\? " line) "?")))

  (defun dw/get-git-status-prompt ()
    (let ((status-lines (cdr (process-lines "git" "status" "--porcelain" "-b"))))
      (seq-uniq (seq-filter 'identity (mapcar 'dw/map-line-to-status-char status-lines)))))

  (defun dw/get-prompt-path ()
    (let* ((current-path (eshell/pwd))
           (git-output (shell-command-to-string "git rev-parse --show-toplevel"))
           (has-path (not (string-match "^fatal" git-output))))
      (if (not has-path)
        (abbreviate-file-name current-path)
        (string-remove-prefix (file-name-directory git-output) current-path))))

  ;; This prompt function mostly replicates my custom zsh prompt setup
  ;; that is powered by github.com/denysdovhan/spaceship-prompt.
  (defun dw/eshell-prompt ()
    (let ((current-branch (magit-get-current-branch))
          (package-version (dw/get-current-package-version)))
      (concat
        "\n"
        (propertize (system-name) 'face `(:foreground "#62aeed"))
        (propertize " ॐ " 'face `(:foreground "white"))
        (propertize (dw/get-prompt-path) 'face `(:foreground "#82cfd3"))
        (when current-branch
          (concat
            (propertize " • " 'face `(:foreground "white"))
            (propertize (concat " " current-branch) 'face `(:foreground "#c475f0"))))
        (when package-version
          (concat
            (propertize " @ " 'face `(:foreground "white"))
            (propertize package-version 'face `(:foreground "#e8a206"))))
        (propertize " • " 'face `(:foreground "white"))
        (propertize (format-time-string "%I:%M:%S %p") 'face `(:foreground "#5a5b7f"))
        (if (= (user-uid) 0)
            (propertize "\n#" 'face `(:foreground "red2"))
            (propertize "\nλ" 'face `(:foreground "#aece4a")))
        (propertize " " 'face `(:foreground "white")))))

  (defun dw/eshell-mode-hook ()
    ;; We want to use xterm-256color when running interactive commands
    ;; in eshell but not during other times when we might be launching
    ;; a shell command to gather its output.
    (add-hook 'eshell-pre-command-hook
      '(lambda () (setenv "TERM" "xterm-256color")))
    (add-hook 'eshell-post-command-hook
      '(lambda () (setenv "TERM" "dumb")))

    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (emojify-mode 0)

    (setenv "PAGER" "cat")
    (company-mode 0))

  ;; TODO: This doesn't currently work
  (unless dw/is-termux
    (add-hook 'eshell-banner-load-hook
      '(lambda ()
        (setq eshell-banner-message
          (concat "\n" (propertize " " 'display (create-image "~/.dotfiles/emacs/images/flux_banner.png" 'png nil :scale 0.4 :align-to "center")) "\n\n")))))

  (use-package eshell
    :after xterm-color
    :hook ((emacs-startup . eshell)
           (eshell-mode . dw/eshell-mode-hook))
    :config
    (eshell/addpath "~/.dotfiles/bin")

    (require 'evil-collection-eshell)
    (evil-collection-eshell-setup)

    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (setq eshell-buffer-maximum-lines 10000)
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    (add-to-list 'eshell-modules-list 'eshell-tramp)
    (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
    (setq eshell-output-filter-functions (remove 'eshell-handle-ansi-color eshell-output-filter-functions))

    (add-hook 'eshell-before-prompt-hook
      (lambda ()
        (setq xterm-color-preserve-properties t)))

    (setq eshell-prompt-function 'dw/eshell-prompt
          eshell-prompt-regexp   "^λ "
          eshell-prefer-lisp-functions nil
          eshell-history-size    10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t
          eshell-highlight-prompt t))

  (use-package eshell-z
    :ensure t
    :hook (eshell-mode . (lambda () (require 'eshell-z))))

  (use-package exec-path-from-shell
    :ensure t
    :init
    (setq exec-path-from-shell-check-startup-files nil)
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))

  (dw/leader-key-def
    "SPC" 'eshell)

#+END_SRC

**** Shell Commands

Custom eshell commands will go here.

**** Visual Commands

#+BEGIN_SRC emacs-lisp

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim")))

#+END_SRC

**** Better Colors

#+BEGIN_SRC emacs-lisp

  (use-package eterm-256color
    :ensure t
    :config
    (add-hook 'term-mode-hook #'eterm-256color-mode))

#+END_SRC

*** multi-term

Some helpful configuration tips can be found [[http://rawsyntax.com/blog/learn-emacs-zsh-and-multi-term/][here]].

#+BEGIN_SRC emacs-lisp

  (use-package multi-term
    :ensure t
    :config
    (setq multi-term-program "/bin/zsh")
    (setq multi-term-program-switches "--login")
    (setq term-buffer-maximum-size 10000)
    (setq term-scroll-to-bottom-on-output t)
    (add-hook 'term-mode-hook
        (lambda ()
          (add-to-list 'term-bind-key-alist '("M-[" . multi-term-prev))
          (add-to-list 'term-bind-key-alist '("M-]" . multi-term-next)))))

  (dw/leader-key-def
    "at"    'multi-term
    "C-SPC" 'multi-term-next)

#+END_SRC

*** Chat

**** ERC

[[https://www.gnu.org/software/emacs/manual/html_node/erc/Modules.html][ERC]] is the big kahuna of Emacs IRC clients.  At first I thought it was too
bulky, but after using =circe= and =rcirc= I started to appreciate some of the
features it provides.  The "static center" fill mode is really awesome.

***** Configuration

#+BEGIN_SRC emacs-lisp

  (use-package erc-hl-nicks :ensure t)
  (use-package erc-image :ensure t)

  (setq erc-modules
    '(autoaway autojoin button completion fill irccontrols keep-place
      list match menu move-to-prompt netsplit networks noncommands notify
      notifications readonly ring smiley stamp track image hl-nicks))

  (setq
    erc-nick "daviwil"
    erc-prompt-for-nickserv-password nil
    erc-auto-query 'bury
    erc-join-buffer 'bury
    erc-interpret-mirc-color t
    erc-rename-buffers t
    erc-lurker-hide-list '("JOIN" "PART" "QUIT")
    erc-track-exclude-types '("JOIN" "NICK" "QUIT" "MODE")
    erc-fill-column 105
    erc-fill-function 'erc-fill-static
    erc-fill-static-center 20
    erc-track-exclude '("#twitter_daviwil")
    erc-autojoin-channels-alist '(("freenode.net" "#emacs" "#guile" "#guix" "#next-browser"))
    erc-quit-reason (lambda (s) (or s "Fading out..."))
    erc-modules
      '(autoaway autojoin button completion fill irccontrols keep-place
        list match menu move-to-prompt netsplit networks noncommands notify
        notifications readonly ring smiley stamp track image hl-nicks))

  (add-hook 'erc-join-hook 'bitlbee-identify)
  (defun bitlbee-identify ()
   "If we're on the bitlbee server, send the identify command to the &bitlbee channel."
   (when (and (string= "127.0.0.1" erc-session-server)
              (string= "&bitlbee" (buffer-name)))
     (erc-message "PRIVMSG" (format "%s identify %s"
                                    (erc-default-target)
                                    (password-store-get "IRC/Bitlbee")))))

  (defun dw/connect-irc ()
    (interactive)
    (erc
       :server "127.0.0.1" :port 6667
       :nick "daviwil" :password (password-store-get "IRC/Bitlbee")))
  ;  (erc
  ;     :server "irc.freenode.net" :port 6667
  ;     :nick "daviwil" :password (password-store-get "IRC/Freenode")))

#+END_SRC

***** Bindings

#+BEGIN_SRC emacs-lisp

  (dw/ctrl-c-keys
    "c"  '(:ignore t :which-key "chat")
    "cb" 'erc-switch-to-buffer
    "cc" 'dw/connect-irc
    "ca" 'erc-track-switch-buffer)

#+END_SRC

***** Reference
- https://www.gnu.org/software/emacs/manual/html_mono/erc.html
- https://www.emacswiki.org/emacs/ErcChannelTracking
- [[https://www.emacswiki.org/emacs/ErcFilling][Automatic window-width filling]]
- John Wiegley's ERC config:
  - https://github.com/jwiegley/dot-emacs/blob/master/lisp/erc-alert.el
  - Settings: https://github.com/jwiegley/dot-emacs/blob/0f7d2c04ac38857d8e0fb036faedbf84193c8bd4/settings.el#L445
  - Commands: https://github.com/jwiegley/dot-emacs/blob/f23993cfcb9ca90c289b4214b9bafbf46883bdb4/lisp/erc-macros.el

**** circe

=circe= was the first IRC client I got working well enough to use for Bitlbee,
though I never found a good UI configuration.  Didn't like the position of the
modeline indicators (though there's probably a way to fix that).

#+BEGIN_SRC emacs-lisp

  (defun circe-bitlbee ()
    (interactive)
    (circe "Bitlbee" :host "127.0.0.1"))

  (use-package circe
    :ensure t
    :config
    (setq tracking-postition 'end)
    (enable-circe-color-nicks)
    (enable-circe-display-images)
    (enable-lui-track-bar)
    (enable-lui-irc-colors))

  (use-package circe-notifications
    :ensure t
    :disabled t
    :after circe
    :config
    (add-hook 'circe-server-connected-hook 'enable-circe-notifications))

#+END_SRC

**** rcirc

Trying [[https://www.gnu.org/software/emacs/manual/html_mono/rcirc.html][rcirc]] as well, lighter than ERC and seemingly cleaner than circe.  So far
I like the position of the mode line tracking better than circe.

#+BEGIN_SRC emacs-lisp

  (use-package rcirc
    :defer t
    :init
    (setq rcirc-server-alist
      '(("localhost")))
    (setq rcirc-authinfo
      `(("localhost" bitlbee "daviwil" ,(password-store-get "IRC/Bitlbee"))))
    :config
    (set (make-local-variable 'scroll-conservatively) 8192)
    (setq rcirc-prompt "» "
          rcirc-time-format "%m/%d %H:%M "
          rcirc-fill-column 100
          rcirc-fill-flag t
          rcirc-omit-responses '("JOIN" "PART" "QUIT" "NICK" "AWAY" "MODE")
          rcirc-track-minor-mode 1)
    (defun-rcirc-command reconnect (arg)
      "Reconnect the server process."
      (interactive "i")
      (if (buffer-live-p rcirc-server-buffer)
        (with-current-buffer rcirc-server-buffer
            (let ((reconnect-buffer (current-buffer))
                  (server (or rcirc-server rcirc-default-server))
                  (port (if (boundp 'rcirc-port) rcirc-port rcirc-default-port))
                  (nick (or rcirc-nick rcirc-default-nick))
                  channels)
            (dolist (buf (buffer-list))
                (with-current-buffer buf
                  (when (equal reconnect-buffer rcirc-server-buffer)
                      (remove-hook 'change-major-mode-hook
                                   'rcirc-change-major-mode-hook)
                      (let ((server-plist (cdr (assoc-string server rcirc-server-alist))))
                        (when server-plist
                            (setq channels (plist-get server-plist :channels))))
                      )))
            (if process (delete-process process))
            (rcirc-connect server port nick
                            nil
                            nil
        channels))))))

#+END_SRC

***** Reference / Things to try

- https://www.emacswiki.org/emacs/rcirc
- https://github.com/aaron-em/rcirc-styles.el
- https://github.com/sinasamavati/rcirc-emote
- https://www.emacswiki.org/emacs/rcircColoredNicks
- https://www.emacswiki.org/emacs/rcircAutoAway
- https://www.emacswiki.org/emacs/rcircAutoFillColumn
- https://www.emacswiki.org/emacs/rcircAutoAuthentication
- https://www.emacswiki.org/emacs/rcircSmiley

**** TODO Try weechat

https://github.com/the-kenny/weechat.el


*** Mastodon

#+BEGIN_SRC emacs-lisp

  (use-package mastodon
    :ensure t
    :config
    (setq mastodon-instance-url "https://mastodon.social"))

#+END_SRC

*** RSS

**** Elfeed

[[https://github.com/skeeto/elfeed][Elfeed]] looks like a great RSS feed reader.  Not using it much yet, but
definitely looking forward to using it to keep track of a few different blogs I
follow using Twitter.  Also seems to be great for following subreddits like
/r/Emacs.

#+BEGIN_SRC emacs-lisp

  (use-package elfeed
    :ensure t
    :config
    (setq elfeed-feeds
      '("http://nullprogram.com/feed/"
        "https://www.reddit.com/r/emacs/.rss"
        "https://atom.io/packages.atom")))

#+END_SRC

*** Media

**** EMMS

#+BEGIN_SRC emacs-lisp

  (use-package emms
    :ensure t
    :config
    (require 'emms-setup)
    (emms-standard)
    (emms-default-players)
    (emms-mode-line-disable)
    (setq emms-source-file-default-directory "~/Music/")
    (dw/leader-key-def
      "am"  '(:ignore t :which-key "media")
      "amp" '(emms-pause :which-key "play / pause")
      "amf" '(emms-play-file :which-key "play file")))

#+END_SRC

**** Spotify

#+BEGIN_SRC emacs-lisp

  ;; (use-package counsel-spotify
  ;;   :ensure t
  ;;   :init
  ;;   (setq counsel-spotify-client-id "9b50922412914b6cba8aa0c9d83b46f4")
  ;;   (setq counsel-spotify-client-secret (password-store-get "API/Spotify/daviwil-emacs-secret")))

#+END_SRC

*** Weather

#+BEGIN_SRC emacs-lisp

  (use-package wttrin
    :ensure t
    :config
    (setq wttrin-default-cities '("Kirkland, WA"))
    (setq wttrin-default-accept-language '("Accept-Language" . "eh-US"))

    (dw/leader-key-def
      "aw"  '(wttrin :which-key "weather")))

#+END_SRC

** Notifications

*** Alert

[[https://github.com/jwiegley/alert][alert]] is a great library for showing notifications from other packages in a
variety of ways.  I'd like to go deep in customization at some point soon, but
for now I just use the normal notification bubbles.

#+BEGIN_SRC emacs-lisp

  (use-package alert
    :commands (alert)
    :config
    (setq alert-default-style 'notifications))

#+END_SRC

*** Sauron

Sauron provides a nice interactive event log that shows you notifications you
might have missed in the past.  I'd like to have a way to be more aware of any
notifications I haven't seen yet, like a modeline indicator.  Probably some way
to set that up.

#+BEGIN_SRC emacs-lisp

  (use-package sauron
    :ensure t
    :disabled
    :custom
    (sauron-modules
      '(sauron-erc sauron-org sauron-notifications
        sauron-mu4e sauron-elfeed))
    :config
    (setq sauron-separate-frame nil)
    (sauron-start-hidden)
    (dw/leader-key-def
      "an"  '(sauron-pop-to-buffer :which-key "notifications")))

#+END_SRC

** System Utilities

*** Guix

#+BEGIN_SRC emacs-lisp

  (use-package guix
    :ensure t
    :config
    (dw/leader-key-def
      "G"  '(:ignore t :which-key "Guix")
      "Gg" '(guix :which-key "Guix")
      "Gi" '(guix-installed-user-packages :which-key "user packages")
      "GI" '(guix-installed-system-packages :which-key "system packages")
      "Gp" '(guix-packages-by-name :which-key "search packages")
      "GP" '(guix-pull :which-key "pull")))

#+END_SRC

*** Daemons

#+begin_src emacs-lisp

  (use-package daemons
    :ensure t)

#+end_src

*** PulseAudio

#+begin_src emacs-lisp

  (use-package pulseaudio-control
    :ensure t
    :config
    (setq pulseaudio-control-pactl-path "/run/current-system/profile/bin/pactl"))

#+end_src

*** System Monitor

#+BEGIN_SRC emacs-lisp

  (use-package symon
    :ensure t
    :config
    (setq symon-monitors '(symon-linux-cpu-monitor
                           symon-linux-memory-monitor
                           symon-linux-battery-monitor))

    (when dw/exwm-enabled
      (symon-mode 1)))

#+END_SRC

*** Docker

#+begin_src emacs-lisp

  (use-package docker
    :ensure t)

  (use-package docker-tramp
    :ensure t)

#+end_src>

** Miscellaneous

*** Emojification

#+BEGIN_SRC emacs-lisp

  (use-package emojify
    :ensure t
    :init (global-emojify-mode))

#+END_SRC

*** Dashboard

Displays a nice list of recent files and projects on startup.

#+BEGIN_SRC emacs-lisp

  (use-package dashboard
    :ensure t
    :disabled
    :config
      (dashboard-setup-startup-hook)
      (setq dashboard-items '((agenda   . 5)
                              (recents  . 5)
                              (projects . 3)))
      (setq dashboard-banner-logo-title ""
            dashboard-startup-banner "~/.dotfiles/emacs/images/flux_banner.png"
            dashboard-image-banner-max-height 500))

#+END_SRC

** Inspiration

[[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]] has a good list of packages and themes to check out.

Other dotfiles repos and blog posts for inspiration:

- [[https://github.com/howardabrams/dot-files][Howard Abrams' dotfiles]]
- [[https://github.com/daedreth/UncleDavesEmacs/blob/master/config.org][UncleDave's Emacs config]]
- [[https://github.com/dakrone/dakrone-dotfiles][dakrone's dotfiles]]
- [[https://github.com/jinnovation/dotemacs][jinnovation dotemacs]]
- [[https://writequit.org/org/][writequit's config]]

** Packages to Try

- https://github.com/takaxp/org-tree-slide
